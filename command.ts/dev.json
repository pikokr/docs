{"meta":{"version":"0.4.0","format":20,"date":1658491841407},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Command.TS\n\n[![.github/workflows/publish.yml](https://github.com/pikokr/command.ts/actions/workflows/publish.yml/badge.svg)](https://github.com/pikokr/command.ts/actions/workflows/publish.yml) <!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-2-orange.svg?style=flat-square)](#contributors-)\n\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n\n![cts](https://user-images.githubusercontent.com/68010770/145200458-b14c5e4e-6927-4516-8d48-c68a384d2a20.png)\n\nCommand framework for discord.js\n\n[Discord](https://discord.gg/EEhcPzsGHV) / [Î¨∏ÏÑú](https://v3.cts.pikokr.dev) / [V2 Î¨∏ÏÑú](https://command-ts-docs-ezojnktwv-pikokr.vercel.app/)\n\n## Contributors\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://pikokr.dev\"><img src=\"https://avatars.githubusercontent.com/u/68010770?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>ÌååÎßÅ</b></sub></a><br /><a href=\"https://github.com/pikokr/command.ts/commits?author=pikokr\" title=\"Code\">üíª</a> <a href=\"#maintenance-pikokr\" title=\"Maintenance\">üöß</a> <a href=\"#ideas-pikokr\" title=\"Ideas, Planning, & Feedback\">ü§î</a> <a href=\"https://github.com/pikokr/command.ts/commits?author=pikokr\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/PyBsh\"><img src=\"https://avatars.githubusercontent.com/u/59782214?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>RootPi</b></sub></a><br /><a href=\"https://github.com/pikokr/command.ts/commits?author=PyBsh\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n","path":"README.md"}}}},"classes":[{"name":"ApplicationCommandComponent","extends":["BaseComponent<UserApplicationCommandData | MessageApplicationCommandData | Omit<ChatInputApplicationCommandData, 'options'> & {\ntype: ApplicationCommandType\n}>"],"construct":{"name":"constructor","params":[{"name":"options","optional":false,"type":[[["UserApplicationCommandData"," & {"],["\ntype",": "],["ApplicationCommandType\n","} & "],["MessageApplicationCommandData"," & {"],["\ntype",": "],["ApplicationCommandType\n","} & "],["Omit","<"],["ChatInputApplicationCommandData",", "],["'options'","> & {"],["\ntype",": "],["ApplicationCommandType\n","}"]]]},{"name":"method","optional":false,"type":[[["Function"]]]},{"name":"argTypes","optional":false,"type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["ApplicationCommandComponent"]]]},"props":[{"name":"argTypes","type":[[["Collection","<"],["number",", "],["ComponentArgument",">"]]],"meta":{"line":21,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"hooks","type":[[["ComponentHookStore"]]],"meta":{"line":19,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"method","type":[[["Function"]]],"meta":{"line":17,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"options","type":[[["UserApplicationCommandData"," & {"],["\ntype",": "],["ApplicationCommandType\n","} & "],["MessageApplicationCommandData"," & {"],["\ntype",": "],["ApplicationCommandType\n","} & "],["Omit","<"],["ChatInputApplicationCommandData",", "],["'options'","> & {"],["\ntype",": "],["ApplicationCommandType\n","}"]]],"meta":{"line":15,"file":"BaseComponent.ts","path":"src/core/components"}}],"methods":[{"name":"convertOptions","params":[{"name":"options","optional":false,"type":[[["UserApplicationCommandData"," & {"],["\ntype",": "],["ApplicationCommandType\n","} & "],["MessageApplicationCommandData"," & {"],["\ntype",": "],["ApplicationCommandType\n","} & "],["Omit","<"],["ChatInputApplicationCommandData",", "],["'options'","> & {"],["\ntype",": "],["ApplicationCommandType\n","}"]]]}],"returns":[[["UserApplicationCommandData"," & {"],["\ntype",": "],["ApplicationCommandType\n","} & "],["MessageApplicationCommandData"," & {"],["\ntype",": "],["ApplicationCommandType\n","} & "],["Omit","<"],["ChatInputApplicationCommandData",", "],["'options'","> & {"],["\ntype",": "],["ApplicationCommandType\n","}"]]],"meta":{"line":33,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"execute","params":[{"name":"target","optional":false,"type":[[["object"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["unknown",">"]]]},{"name":"beforeCallArgs","optional":true,"default":"args","type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":49,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"executeHook","params":[{"name":"target","optional":false,"type":[[["object"]]]},{"name":"name","optional":false,"type":[[["string"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":37,"file":"BaseComponent.ts","path":"src/core/components"}}],"meta":{"line":13,"file":"ApplicationCommand.ts","path":"src/applicationCommand"}},{"name":"BaseComponent","construct":{"name":"constructor","params":[{"name":"options","optional":false,"type":[[["OptionsArg"]]]},{"name":"method","optional":false,"type":[[["Function"]]]},{"name":"argTypes","optional":false,"type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["BaseComponent","<"],["Options",", "],["OptionsArg",">"]]],"meta":{"line":23,"file":"BaseComponent.ts","path":"src/core/components"}},"props":[{"name":"argTypes","type":[[["Collection","<"],["number",", "],["ComponentArgument",">"]]],"meta":{"line":21,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"hooks","type":[[["ComponentHookStore"]]],"meta":{"line":19,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"method","type":[[["Function"]]],"meta":{"line":17,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"options","type":[[["Options"]]],"meta":{"line":15,"file":"BaseComponent.ts","path":"src/core/components"}}],"methods":[{"name":"convertOptions","params":[{"name":"options","optional":false,"type":[[["OptionsArg"]]]}],"returns":[[["Options"]]],"meta":{"line":33,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"execute","params":[{"name":"target","optional":false,"type":[[["object"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["unknown",">"]]]},{"name":"beforeCallArgs","optional":true,"default":"args","type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":49,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"executeHook","params":[{"name":"target","optional":false,"type":[[["object"]]]},{"name":"name","optional":false,"type":[[["string"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":37,"file":"BaseComponent.ts","path":"src/core/components"}}],"meta":{"line":14,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"CommandClient","extends":["EventEmitter"],"construct":{"name":"constructor","params":[{"name":"discord","optional":false,"type":[[["Client","<"],["boolean",">"]]]},{"name":"logger","optional":true,"type":[[["Logger"]]]}],"returns":[[["CommandClient"]]],"meta":{"line":24,"file":"CommandClient.ts","path":"src/core/structures"}},"props":[{"name":"ctsLogger","type":[[["Logger"]]],"meta":{"line":19,"file":"CommandClient.ts","path":"src/core/structures"}},{"name":"discord","type":[[["Client","<"],["boolean",">"]]]},{"name":"logger","type":[[["Logger"]]]},{"name":"owners","type":[[["Set","<"],["string",">"]]],"meta":{"line":22,"file":"CommandClient.ts","path":"src/core/structures"}},{"name":"registry","type":[[["Registry"]]],"meta":{"line":20,"file":"CommandClient.ts","path":"src/core/structures"}},{"name":"captureRejectionSymbol","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["captureRejectionSymbol",")"]]],"meta":{"line":291,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"captureRejections","description":"Sets or gets the default captureRejection value for all emitters.","scope":"static","type":[[["boolean"]]],"meta":{"line":296,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":297,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"errorMonitor","description":"This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["errorMonitor",")"]]],"meta":{"line":290,"file":"events.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["CommandClient"]]]},{"name":"emit","description":"Synchronously calls each of the listeners registered for the event named`eventName`, in the order they were registered, passing the supplied arguments\nto each.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["any",">"]]],"variable":true}],"returns":[[["boolean"]]]},{"name":"enableApplicationCommandsExtension","params":[{"name":"config","optional":false,"type":[[["ApplicationCommandExtensionConfig"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":61,"file":"CommandClient.ts","path":"src/core/structures"}},{"name":"enableTextCommandsExtension","params":[{"name":"config","optional":false,"type":[[["TextCommandConfig"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":66,"file":"CommandClient.ts","path":"src/core/structures"}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Array","<"],["string"," | "],["symbol",">"]]]},{"name":"fetchOwners","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":35,"file":"CommandClient.ts","path":"src/core/structures"}},{"name":"getApplicationCommandsExtension","returns":[[["undefined"," | "],["ApplicationCommandExtension"]]],"meta":{"line":71,"file":"CommandClient.ts","path":"src/core/structures"}},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["number"]]]},{"name":"listenerCount","description":"Returns the number of listeners listening to the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]]},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"off","description":"Alias for `emitter.removeListener()`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["CommandClient"]]]},{"name":"on","description":"Adds the `listener` function to the end of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["CommandClient"]]]},{"name":"once","description":"Adds a **one-time**`listener` function for the event named `eventName`. The\nnext time `eventName` is triggered, this listener is removed and then invoked.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["CommandClient"]]]},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["CommandClient"]]]},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["CommandClient"]]]},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"removeAllListeners","description":"Removes all listeners, or those of the specified `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"event","optional":true,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["CommandClient"]]]},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named`eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["CommandClient"]]]},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"n","optional":false,"type":[[["number"]]]}],"returns":[[["CommandClient"]]]},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["EventEmitter"," | "],["DOMEventTarget"]]]},{"name":"name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]],"meta":{"line":262,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"getFromModule","scope":"static","params":[{"name":"ext","optional":false,"type":[[["object"]]]}],"returns":[[["CommandClient"]]],"meta":{"line":75,"file":"CommandClient.ts","path":"src/core/structures"}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":true,"emits":[],"params":[{"name":"emitter","description":"The emitter to query","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The event name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]],"meta":{"line":234,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"on","description":"```js\nconst { on, EventEmitter } = require('events');","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["AsyncIterableIterator","<"],["any",">"]]],"returnsDescription":"that iterates `eventName` events emitted by the `emitter`","meta":{"line":217,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["NodeEventTarget"]]]},{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":157,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"setMaxListeners","description":"```js\nconst {\n  setMaxListeners,\n  EventEmitter\n} = require('events');","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"n","description":"A non-negative number. The maximum number of listeners per `EventTarget` event.","optional":true,"type":[[["number"]]]},{"name":"eventTargets","optional":false,"type":[[["Array","<"],["EventEmitter"," | "],["DOMEventTarget",">"]]],"variable":true}],"returns":[[["void"]]],"meta":{"line":280,"file":"events.d.ts","path":"node_modules/@types/node"}}],"meta":{"line":18,"file":"CommandClient.ts","path":"src/core/structures"}},{"name":"ComponentArgument","construct":{"name":"constructor","params":[{"name":"type","optional":false,"type":[[["unknown"]]]}],"returns":[[["ComponentArgument"]]],"meta":{"line":14,"file":"ComponentArgument.ts","path":"src/core/components"}},"props":[{"name":"decorators","default":"[]","type":[[["Array","<"],["ComponentArgumentDecorator","<"],["unknown",">>"]]],"meta":{"line":12,"file":"ComponentArgument.ts","path":"src/core/components"}},{"name":"type","type":[[["unknown"]]]}],"meta":{"line":11,"file":"ComponentArgument.ts","path":"src/core/components"}},{"name":"ComponentArgumentDecorator","construct":{"name":"constructor","params":[{"name":"options","optional":false,"type":[[["Partial","<"],["Options",">"]]]}],"returns":[[["ComponentArgumentDecorator","<"],["Options",">"]]],"meta":{"line":14,"file":"ComponentArgumentDecorator.ts","path":"src/core/components"}},"props":[{"name":"options","type":[[["Options"]]],"meta":{"line":12,"file":"ComponentArgumentDecorator.ts","path":"src/core/components"}}],"methods":[{"name":"defaultOptions","returns":[[["Options"]]],"meta":{"line":22,"file":"ComponentArgumentDecorator.ts","path":"src/core/components"}}],"meta":{"line":11,"file":"ComponentArgumentDecorator.ts","path":"src/core/components"}},{"name":"ConverterComponent","extends":["BaseComponent<Options, Omit<Options, 'parameterless'> & {\nparameterless: boolean\n}>"],"construct":{"name":"constructor","params":[{"name":"options","optional":false,"type":[[["Omit","<"],["Options",", "],["'parameterless'","> & {"],["\nparameterless",": "],["boolean\n","}"]]]},{"name":"method","optional":false,"type":[[["Function"]]]},{"name":"argTypes","optional":false,"type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["ConverterComponent"]]]},"props":[{"name":"argTypes","type":[[["Collection","<"],["number",", "],["ComponentArgument",">"]]],"meta":{"line":21,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"hooks","type":[[["ComponentHookStore"]]],"meta":{"line":19,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"method","type":[[["Function"]]],"meta":{"line":17,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"options","type":[[["Options"]]],"meta":{"line":15,"file":"BaseComponent.ts","path":"src/core/components"}}],"methods":[{"name":"convertOptions","params":[{"name":"options","optional":false,"type":[[["Omit","<"],["Options",", "],["'parameterless'","> & {"],["\nparameterless",": "],["boolean\n","}"]]]}],"returns":[[["Options"]]],"meta":{"line":33,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"execute","params":[{"name":"target","optional":false,"type":[[["object"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["unknown",">"]]]},{"name":"beforeCallArgs","optional":true,"default":"args","type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":49,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"executeHook","params":[{"name":"target","optional":false,"type":[[["object"]]]},{"name":"name","optional":false,"type":[[["string"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":37,"file":"BaseComponent.ts","path":"src/core/components"}}],"meta":{"line":14,"file":"index.ts","path":"src/core/converter"}},{"name":"Extension","construct":{"name":"constructor","returns":[[["Extension"]]]},"props":[{"name":"_logger","type":[[["Logger"]]],"meta":{"line":26,"file":"Extension.ts","path":"src/core/extensions"}},{"name":"client","readonly":true,"type":[[["Client","<"],["boolean",">"]]],"meta":{"line":22,"file":"Extension.ts","path":"src/core/extensions"}},{"name":"commandClient","readonly":true,"type":[[["CommandClient"]]],"meta":{"line":18,"file":"Extension.ts","path":"src/core/extensions"}},{"name":"logger","readonly":true,"type":[[["Logger"]]],"meta":{"line":28,"file":"Extension.ts","path":"src/core/extensions"}}],"methods":[{"name":"convertArguments","params":[{"name":"component","optional":false,"type":[[["Object"]]]},{"name":"argList","optional":false,"type":[[["Array","<"],["unknown",">"]]]},{"name":"args","optional":false,"type":[[["Collection","<"],["number",", "],["ComponentArgument",">"]]]},{"name":"getConverterArgs","optional":false,"type":[[["("],["arg",": "],["ComponentArgument",", "],["index",": "],["number",", "],["converter",": "],["ConverterComponent",") => "],["Array","<"],["unknown","> | "],["Promise","<"],["Array","<"],["unknown",">>"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":33,"file":"Extension.ts","path":"src/core/extensions"}}],"meta":{"line":17,"file":"Extension.ts","path":"src/core/extensions"}},{"name":"ListenerComponent","extends":["BaseComponent<{\nemitter: string,\nevent: string\n}, {\nemitter: string,\nevent: string\n}>"],"construct":{"name":"constructor","params":[{"name":"options","optional":false,"type":[[["{"],["\nemitter",": "],["string",","],["\nevent",": "],["string\n","}"]]]},{"name":"method","optional":false,"type":[[["Function"]]]},{"name":"argTypes","optional":false,"type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["ListenerComponent"]]],"meta":{"line":17,"file":"index.ts","path":"src/core/listener"}},"props":[{"name":"argTypes","type":[[["Collection","<"],["number",", "],["ComponentArgument",">"]]],"meta":{"line":21,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"hooks","type":[[["ComponentHookStore"]]],"meta":{"line":19,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"method","type":[[["Function"]]],"meta":{"line":17,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"options","type":[[["{"],["\nemitter",": "],["string",","],["\nevent",": "],["string\n","}"]]],"meta":{"line":15,"file":"BaseComponent.ts","path":"src/core/components"}}],"methods":[{"name":"convertOptions","params":[{"name":"options","optional":false,"type":[[["{"],["\nemitter",": "],["string",","],["\nevent",": "],["string\n","}"]]]}],"returns":[[["{"],["\nemitter",": "],["string",","],["\nevent",": "],["string\n","}"]]],"meta":{"line":33,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"defaultOptions","returns":[[["{"],["\nemitter",": "],["string\n","}"]]],"meta":{"line":13,"file":"index.ts","path":"src/core/listener"}},{"name":"execute","params":[{"name":"target","optional":false,"type":[[["object"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["unknown",">"]]]},{"name":"beforeCallArgs","optional":true,"default":"args","type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":49,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"executeHook","params":[{"name":"target","optional":false,"type":[[["object"]]]},{"name":"name","optional":false,"type":[[["string"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":37,"file":"BaseComponent.ts","path":"src/core/components"}}],"meta":{"line":12,"file":"index.ts","path":"src/core/listener"}},{"name":"OwnerOnlyError","construct":{"name":"constructor","returns":[[["OwnerOnlyError"]]]},"meta":{"line":9,"file":"errors.ts","path":"src/core/utils"}},{"name":"Registry","construct":{"name":"constructor","params":[{"name":"logger","optional":false,"type":[[["Logger"]]]},{"name":"client","optional":false,"type":[[["CommandClient"]]]}],"returns":[[["Registry"]]],"meta":{"line":28,"file":"Registry.ts","path":"src/core/structures"}},"props":[{"name":"client","type":[[["CommandClient"]]]},{"name":"emitters","type":[[["Collection","<"],["string",", __"],["module",">"]]],"meta":{"line":24,"file":"Registry.ts","path":"src/core/structures"}},{"name":"extensions","default":"[]","type":[[["Array","<"],["object",">"]]],"meta":{"line":22,"file":"Registry.ts","path":"src/core/structures"}},{"name":"logger","type":[[["Logger"]]],"meta":{"line":26,"file":"Registry.ts","path":"src/core/structures"}}],"methods":[{"name":"getComponentsWithType","params":[{"name":"ext","optional":false,"type":[[["object"]]]},{"name":"type","optional":false,"type":[[["T"]]]}],"returns":[[["Array","<"],["InstanceType","<"],["T",">>"]]],"meta":{"line":44,"file":"Registry.ts","path":"src/core/structures"}},{"name":"getComponentsWithTypeGlobal","params":[{"name":"type","optional":false,"type":[[["T"]]]}],"returns":[[["Array","<"],["InstanceType","<"],["T",">>"]]],"meta":{"line":34,"file":"Registry.ts","path":"src/core/structures"}},{"name":"registerEventEmitter","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"emitter","optional":false,"type":[[["__"],["module"]]]}],"returns":[[["void"]]],"meta":{"line":107,"file":"Registry.ts","path":"src/core/structures"}},{"name":"registerEventListeners","params":[{"name":"ext","optional":false,"type":[[["object"]]]}],"returns":[[["void"]]],"meta":{"line":50,"file":"Registry.ts","path":"src/core/structures"}},{"name":"registerModule","params":[{"name":"ext","optional":false,"type":[[["object"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":79,"file":"Registry.ts","path":"src/core/structures"}},{"name":"runModuleHook","params":[{"name":"ext","optional":false,"type":[[["object"]]]},{"name":"hookName","optional":false,"type":[[["string"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["unknown",">"]]],"variable":true}],"returns":[[["void"]]],"meta":{"line":95,"file":"Registry.ts","path":"src/core/structures"}},{"name":"unregisterEventListeners","params":[{"name":"ext","optional":false,"type":[[["object"]]]}],"returns":[[["void"]]],"meta":{"line":66,"file":"Registry.ts","path":"src/core/structures"}},{"name":"unregisterModule","params":[{"name":"ext","optional":false,"type":[[["object"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":88,"file":"Registry.ts","path":"src/core/structures"}}],"meta":{"line":21,"file":"Registry.ts","path":"src/core/structures"}},{"name":"TextCommandComponent","extends":["BaseComponent<TextCommandOptions>"],"construct":{"name":"constructor","params":[{"name":"options","optional":false,"type":[[["TextCommandOptions"]]]},{"name":"method","optional":false,"type":[[["Function"]]]},{"name":"argTypes","optional":false,"type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["TextCommandComponent"]]]},"props":[{"name":"argTypes","type":[[["Collection","<"],["number",", "],["ComponentArgument",">"]]],"meta":{"line":21,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"hooks","type":[[["ComponentHookStore"]]],"meta":{"line":19,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"method","type":[[["Function"]]],"meta":{"line":17,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"options","type":[[["TextCommandOptions"]]],"meta":{"line":15,"file":"BaseComponent.ts","path":"src/core/components"}}],"methods":[{"name":"convertOptions","params":[{"name":"options","optional":false,"type":[[["TextCommandOptions"]]]}],"returns":[[["TextCommandOptions"]]],"meta":{"line":33,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"execute","params":[{"name":"target","optional":false,"type":[[["object"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["unknown",">"]]]},{"name":"beforeCallArgs","optional":true,"default":"args","type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":49,"file":"BaseComponent.ts","path":"src/core/components"}},{"name":"executeHook","params":[{"name":"target","optional":false,"type":[[["object"]]]},{"name":"name","optional":false,"type":[[["string"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["unknown",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":37,"file":"BaseComponent.ts","path":"src/core/components"}}],"meta":{"line":18,"file":"TextCommand.ts","path":"src/textCommand"}},{"name":"TextCommandRestOption","extends":["ComponentArgumentDecorator<void>"],"construct":{"name":"constructor","params":[{"name":"options","optional":false,"type":[[["void"]]]}],"returns":[[["TextCommandRestOption"]]]},"props":[{"name":"options","type":[[["void"]]],"meta":{"line":12,"file":"ComponentArgumentDecorator.ts","path":"src/core/components"}}],"methods":[{"name":"defaultOptions","returns":[[["void"]]],"meta":{"line":22,"file":"ComponentArgumentDecorator.ts","path":"src/core/components"}}],"meta":{"line":12,"file":"parameters.ts","path":"src/textCommand"}}],"typedefs":[{"name":"ComponentHookStore","type":[[["Collection","<"],["string",", "],["Array","<"],["ComponentHookFn",">>"]]],"meta":{"line":14,"file":"componentHook.ts","path":"src/core/hooks"}},{"name":"TextCommandConfig","type":[[["{"],["\nprefix",": "],["string"," | "],["Array","<"],["string","> | ("],["msg",": "],["Message",") => "],["Promise","<"],["string"," | "],["Array","<"],["string",">> | "],["string"," | "],["Array","<"],["string",">"],["\n","}"]]],"meta":{"line":16,"file":"TextCommandExtension.ts","path":"src/textCommand"},"props":[{"name":"prefix","optional":false,"type":[[["string"," | "],["Array","<"],["string","> | ("],["msg",": "],["Message",") => "],["Promise","<"],["string"," | "],["Array","<"],["string",">> | "],["string"," | "],["Array","<"],["string",">"]]]}]}]}